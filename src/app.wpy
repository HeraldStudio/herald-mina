<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}

  button::after{
    border: none;
  }

  .polygon{
    width: 16rpx;
    height: 8rpx;
    padding-bottom: 35rpx;
  }

  .regular-14{
    font-size:32rpx;
    color:#333333;
    line-height:1;
  }

  .number{
    font-size:36rpx;
    color:#00abc3;
    line-height:1;
  }

  .bold-14{
    font-size:32rpx;
    color:#555555;
    font-weight: bold;
    line-height:1;
  }

  .regular-13{
    font-size:30rpx;
    color:#333333;
    line-height:1;
  }

  .bold-13{
    font-size:30rpx;
    color:#555555;
    font-weight: bold;
    line-height:1;
  }

  .secondary{
    color:#888888;
  }
  
  button.primary{
    border-color: #ddfbff;
    border-radius: 8rpx;
    font-size: 32rpx;
    padding: 15rpx 25rpx 15rpx 25rpx;
    background-color: #ddfbff;
    font-weight: bold;
    color: #237a86;
    line-height: 1;
  }

  button.primary:active{
    background-color: #add5da;
  }

  button.warning{
    border-radius: 8rpx;
    padding: 15rpx 25rpx 15rpx 25rpx;
    background-color: #fff6de;
    font-size: 32rpx;
    font-weight: bold;
    color: #876b23;
  }

  input.regular{
    color:#333333;
    background-color: #fafafa;
    border-radius: 8rpx;
    font-size:30rpx;
    padding: 15rpx 25rpx 15rpx 25rpx;
    margin-bottom:35rpx;
  }

  .input-placeholder{
    color:#888888;
    font-size: 30rpx;
  }

  .card{
    padding:40rpx 0 40rpx 0;
    border-bottom-style: solid;
    border-bottom-color: #f0f0f0;
    border-bottom-width: 1rpx;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    width: 100%;
    height: 100%;
    .title{
      .bold-14;
      padding-bottom: 35rpx;
      align-self: center;
    }
    .subtitle{
      .regular-14;
      color: #888888;
      padding-bottom: 35rpx;
      align-self: center;
    }
    .polygon{
      .polygon;
      padding-bottom: 20rpx;
      align-self: center;
    }
    .content{
      padding: 0pt 35rpx 0pt 35rpx;
      display: flex;
      flex-direction: column;
      align-items: stretch;
    }
  }


</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
const herald = {}
export default class extends wepy.app {
  config = {
    pages: [
      'pages/home',
      'pages/activity',
      'pages/notification'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#00abc3',
      navigationBarTitleText: '小猴偷米',
      navigationBarTextStyle: 'white'
    },
    tabBar: {
      color:'#888888',
      selectedColor:'#00abc3',
      backgroundColor:'#ffffff',
      list: [{
        iconPath: "resource/images/tab-icon/home.png",
        selectedIconPath: "resource/images/tab-icon/home-selected.png",
        pagePath: "pages/home",
        text: "首页"
    }, {
        iconPath: "resource/images/tab-icon/activity.png",
        selectedIconPath: "resource/images/tab-icon/activity-selected.png",
        pagePath: "pages/activity",
        text: "活动"
    }, {
        iconPath: "resource/images/tab-icon/notification.png",
        selectedIconPath: "resource/images/tab-icon/notification-selected.png",
        pagePath: "pages/notification",
        text: "通知"
    }]}
  }
  enablePullDownRefresh = true

 

  globalData = {
    userInfo: null,
  }

  constructor () {
    super()
    this.use('requestfix')
  }

  onLaunch() {
    this.testAsync()
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync () {
    const data = await this.sleep(3)
    console.log(data)
  }

  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }
}
</script>
